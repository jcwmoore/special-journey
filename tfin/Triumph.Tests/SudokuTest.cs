using System;
using System.Collections.Generic;
using Xunit;
using Sudoku.Implementation;

namespace Sudoku.Tests
{
    public class SudokuTest
    {
        [Fact]
        public void TestSuppliesAllMovesForCase1()
        {
            var board = new GameBoard(0, 0, 8, 3, 4, 2, 9, 0, 0,
                            0, 0, 9, 0, 0, 0, 7, 0, 0,
                            4, 0, 0, 0, 0, 0, 0, 0, 3,
                            0, 0, 6, 4, 7, 3, 2, 0, 0,
                            0, 3, 0, 0, 0, 0, 0, 1, 0,
                            0, 0, 2, 8, 5, 1, 6, 0, 0,
                            7, 0, 0, 0, 0, 0, 0, 0, 8,
                            0, 0, 4, 0, 0, 0, 1, 0, 0,
                            0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_1 = new GameBoard(1, 0, 8, 3, 4, 2, 9, 0, 0,
                                       0, 0, 9, 0, 0, 0, 7, 0, 0,
                                       4, 0, 0, 0, 0, 0, 0, 0, 3,
                                       0, 0, 6, 4, 7, 3, 2, 0, 0,
                                       0, 3, 0, 0, 0, 0, 0, 1, 0,
                                       0, 0, 2, 8, 5, 1, 6, 0, 0,
                                       7, 0, 0, 0, 0, 0, 0, 0, 8,
                                       0, 0, 4, 0, 0, 0, 1, 0, 0,
                                       0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_2 = new GameBoard(5, 0, 8, 3, 4, 2, 9, 0, 0,
                                         0, 0, 9, 0, 0, 0, 7, 0, 0,
                                         4, 0, 0, 0, 0, 0, 0, 0, 3,
                                         0, 0, 6, 4, 7, 3, 2, 0, 0,
                                         0, 3, 0, 0, 0, 0, 0, 1, 0,
                                         0, 0, 2, 8, 5, 1, 6, 0, 0,
                                         7, 0, 0, 0, 0, 0, 0, 0, 8,
                                         0, 0, 4, 0, 0, 0, 1, 0, 0,
                                         0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_3 = new GameBoard(6, 0, 8, 3, 4, 2, 9, 0, 0,
                                 0, 0, 9, 0, 0, 0, 7, 0, 0,
                                 4, 0, 0, 0, 0, 0, 0, 0, 3,
                                 0, 0, 6, 4, 7, 3, 2, 0, 0,
                                 0, 3, 0, 0, 0, 0, 0, 1, 0,
                                 0, 0, 2, 8, 5, 1, 6, 0, 0,
                                 7, 0, 0, 0, 0, 0, 0, 0, 8,
                                 0, 0, 4, 0, 0, 0, 1, 0, 0,
                                 0, 0, 3, 6, 9, 7, 5, 0, 0);
            Assert.Equal(board.NextMoves(), new List<GameBoard> { next_move_1, next_move_2, next_move_3 });
        }

        [Fact]
        public void TestSuppliesAllMovesForCase2()
        {

            var board = new GameBoard(1, 0, 8, 3, 4, 2, 9, 0, 0,
                            0, 0, 9, 0, 0, 0, 7, 0, 0,
                            4, 0, 0, 0, 0, 0, 0, 0, 3,
                            0, 0, 6, 4, 7, 3, 2, 0, 0,
                            0, 3, 0, 0, 0, 0, 0, 1, 0,
                            0, 0, 2, 8, 5, 1, 6, 0, 0,
                            7, 0, 0, 0, 0, 0, 0, 0, 8,
                            0, 0, 4, 0, 0, 0, 1, 0, 0,
                            0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_1 = new GameBoard(1, 5, 8, 3, 4, 2, 9, 0, 0,
                             0, 0, 9, 0, 0, 0, 7, 0, 0,
                             4, 0, 0, 0, 0, 0, 0, 0, 3,
                             0, 0, 6, 4, 7, 3, 2, 0, 0,
                             0, 3, 0, 0, 0, 0, 0, 1, 0,
                             0, 0, 2, 8, 5, 1, 6, 0, 0,
                             7, 0, 0, 0, 0, 0, 0, 0, 8,
                             0, 0, 4, 0, 0, 0, 1, 0, 0,
                             0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_2 = new GameBoard(1, 6, 8, 3, 4, 2, 9, 0, 0,
                             0, 0, 9, 0, 0, 0, 7, 0, 0,
                             4, 0, 0, 0, 0, 0, 0, 0, 3,
                             0, 0, 6, 4, 7, 3, 2, 0, 0,
                             0, 3, 0, 0, 0, 0, 0, 1, 0,
                             0, 0, 2, 8, 5, 1, 6, 0, 0,
                             7, 0, 0, 0, 0, 0, 0, 0, 8,
                             0, 0, 4, 0, 0, 0, 1, 0, 0,
                             0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_3 = new GameBoard(1, 7, 8, 3, 4, 2, 9, 0, 0,
                             0, 0, 9, 0, 0, 0, 7, 0, 0,
                             4, 0, 0, 0, 0, 0, 0, 0, 3,
                             0, 0, 6, 4, 7, 3, 2, 0, 0,
                             0, 3, 0, 0, 0, 0, 0, 1, 0,
                             0, 0, 2, 8, 5, 1, 6, 0, 0,
                             7, 0, 0, 0, 0, 0, 0, 0, 8,
                             0, 0, 4, 0, 0, 0, 1, 0, 0,
                             0, 0, 3, 6, 9, 7, 5, 0, 0);
            Assert.Equal(board.NextMoves(), new List<GameBoard> { next_move_1, next_move_2, next_move_3 });
        }
        [Fact]
        public void TestSuppliesAllMovesForCase3()
        {

            var board = new GameBoard(1, 5, 8, 3, 4, 2, 9, 0, 0,
                          0, 0, 9, 0, 0, 0, 7, 0, 0,
                          4, 0, 0, 0, 0, 0, 0, 0, 3,
                          0, 0, 6, 4, 7, 3, 2, 0, 0,
                          0, 3, 0, 0, 0, 0, 0, 1, 0,
                          0, 0, 2, 8, 5, 1, 6, 0, 0,
                          7, 0, 0, 0, 0, 0, 0, 0, 8,
                          0, 0, 4, 0, 0, 0, 1, 0, 0,
                          0, 0, 3, 6, 9, 7, 5, 0, 0);
            var next_move_1 = new GameBoard(1, 5, 8, 3, 4, 2, 9, 6, 0,
                                 0, 0, 9, 0, 0, 0, 7, 0, 0,
                                 4, 0, 0, 0, 0, 0, 0, 0, 3,
                                 0, 0, 6, 4, 7, 3, 2, 0, 0,
                                 0, 3, 0, 0, 0, 0, 0, 1, 0,
                                 0, 0, 2, 8, 5, 1, 6, 0, 0,
                                 7, 0, 0, 0, 0, 0, 0, 0, 8,
                                 0, 0, 4, 0, 0, 0, 1, 0, 0,
                                 0, 0, 3, 6, 9, 7, 5, 0, 0);
            Assert.Equal(board.NextMoves(), new List<GameBoard> { next_move_1 });
        }

        [Fact]
        public void TestSolvesForCase1()
        {
            var board = new GameBoard(0, 0, 8, 3, 4, 2, 9, 0, 0,
                            0, 0, 9, 0, 0, 0, 7, 0, 0,
                            4, 0, 0, 0, 0, 0, 0, 0, 3,
                            0, 0, 6, 4, 7, 3, 2, 0, 0,
                            0, 3, 0, 0, 0, 0, 0, 1, 0,
                            0, 0, 2, 8, 5, 1, 6, 0, 0,
                            7, 0, 0, 0, 0, 0, 0, 0, 8,
                            0, 0, 4, 0, 0, 0, 1, 0, 0,
                            0, 0, 3, 6, 9, 7, 5, 0, 0);
            var solved_board = new GameBoard(6, 7, 8, 3, 4, 2, 9, 5, 1,
                                  3, 2, 9, 1, 8, 5, 7, 6, 4,
                                  4, 5, 1, 7, 6, 9, 8, 2, 3,
                                  5, 1, 6, 4, 7, 3, 2, 8, 9,
                                  8, 3, 7, 9, 2, 6, 4, 1, 5,
                                  9, 4, 2, 8, 5, 1, 6, 3, 7,
                                  7, 6, 5, 2, 1, 4, 3, 9, 8,
                                  2, 9, 4, 5, 3, 8, 1, 7, 6,
                                  1, 8, 3, 6, 9, 7, 5, 4, 2);
            Assert.Equal(Game.Solve(board), solved_board);

        }

        [Fact]
        public void TestSolvesForCase2()
        {
            var board = new GameBoard(0, 0, 4, 0, 0, 0, 5, 0, 0,
                           0, 7, 0, 2, 0, 0, 3, 6, 0,
                           8, 0, 0, 0, 0, 1, 0, 0, 0,
                           6, 2, 9, 0, 0, 0, 0, 3, 0,
                           0, 0, 0, 0, 6, 0, 0, 0, 0,
                           0, 4, 0, 0, 0, 0, 6, 1, 8,
                           0, 0, 0, 7, 0, 0, 0, 0, 6,
                           0, 1, 3, 0, 0, 4, 0, 2, 0,
                           0, 0, 2, 0, 0, 0, 4, 0, 0);
            var solved_board = new GameBoard(2, 3, 4, 9, 7, 6, 5, 8, 1,
                                  9, 7, 1, 2, 8, 5, 3, 6, 4,
                                  8, 5, 6, 4, 3, 1, 2, 9, 7,
                                  6, 2, 9, 1, 4, 8, 7, 3, 5,
                                  1, 8, 5, 3, 6, 7, 9, 4, 2,
                                  3, 4, 7, 5, 9, 2, 6, 1, 8,
                                  4, 9, 8, 7, 2, 3, 1, 5, 6,
                                  7, 1, 3, 6, 5, 4, 8, 2, 9,
                                  5, 6, 2, 8, 1, 9, 4, 7, 3);
            Assert.Equal(Game.Solve(board), solved_board);

        }
    }
}